(()=>{"use strict";class e{static openDB(e){let t;const o=indexedDB.open(this.expDbName,this.version);o.onerror=e=>{var t;console.log("ExpenseApp isn't allowed to use IndexedDB?!"+(null===(t=e.target)||void 0===t?void 0:t.errorCode))},o.onupgradeneeded=e=>{t=o.result,t.objectStoreNames.contains(this.expStoreName)||t.createObjectStore(this.expStoreName,{keyPath:"id"}),t.objectStoreNames.contains(this.catStoreName)||t.createObjectStore(this.catStoreName,{keyPath:"id"})},o.onsuccess=o=>{var n;t=null===(n=o.target)||void 0===n?void 0:n.result,e&&e(t)}}static addToStore(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.expStoreName;this.openDB((o=>{const n=o.transaction(t,"readwrite"),s=n.objectStore(t);Array.isArray(e)?e.forEach((e=>this.addToDb(s,e))):this.addToDb(s,e),n.onerror=function(e){console.log("transaction failed",e)},n.oncomplete=e=>{o.close()}}))}static addToDb(e,t){const o=e.put(t);o.onerror=function(){console.log("Error did not save to store",o.error)}}static getFromStore(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.expStoreName;return new Promise(((t,o)=>{this.openDB((o=>{const n=o.transaction(e,"readonly"),s=n.objectStore(e).getAll();s.onsuccess=function(e){var o;t(null===(o=e.target)||void 0===o?void 0:o.result)},s.onerror=function(){console.log("Error did not read to store",s.error)},n.onerror=function(e){console.log("transaction failed",e)}}))}))}}e.expDbName="expenses-db",e.version=1,e.expStoreName="exp-store",e.catStoreName="cat-store";const t="v1.0.0-testing24";self.addEventListener("install",(e=>{console.log("".concat(t," installing\u2026"));const o=[{'revision':'a3d95736a42d3116dcd6b24bbb03eb3b','url':'/ExpenseTrackingAppReactJS/index.html'},{'revision':null,'url':'/ExpenseTrackingAppReactJS/static/css/main.d8e655ee.css'},{'revision':null,'url':'/ExpenseTrackingAppReactJS/static/js/main.70e1b6b8.js'}];self.skipWaiting(),e.waitUntil((async e=>{const o=await caches.open(t);await o.addAll(e.map((e=>e.url)))})(o))})),self.addEventListener("activate",(e=>{e.waitUntil((async()=>{const e=await caches.keys();await Promise.all(e.filter((e=>e!==t)).map((e=>caches.delete(e))))})()),console.log("".concat(t," activated..."))})),self.addEventListener("fetch",(e=>{e.respondWith((async e=>{const o=await caches.match(e);if(o)return o;const n=await fetch(e);return(async(e,o)=>{const n=await caches.open(t);"POST"!==e.method?e.url.includes("/ExpenseTrackingAppReactJS")?await n.put(e,o):console.log("Cannot cache 3rd party requests"):console.log("Cannot cache POST requests")})(e,n.clone()),n})(e.request))})),self.addEventListener("message",(e=>{})),self.addEventListener("sync",(function(t){if("expense-sync"===t.tag){const t=new BroadcastChannel("indexdb-expenses");e.getFromStore().then((e=>{t.postMessage(e)}));const o=new BroadcastChannel("indexdb-categories");e.getFromStore(e.catStoreName).then((e=>{o.postMessage(e)}))}}))})();
//# sourceMappingURL=service-worker.js.map